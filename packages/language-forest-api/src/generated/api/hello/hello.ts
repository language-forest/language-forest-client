/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Sample API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetHelloJsonParams,
  YourTextDto
} from '../../schemas'
import { fetchClient } from '../../../../fetchClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary Hello 엔드포인트
 */
export const getHello = (
    
 signal?: AbortSignal
) => {
      
      
      return fetchClient<string>(
      {url: `/hello`, method: 'GET', signal
    },
      );
    }
  

export const getGetHelloQueryKey = () => {
    return [`/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHello>>> = ({ signal }) => getHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof getHello>>>
export type GetHelloQueryError = unknown


export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Hello 엔드포인트
 */

export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Hello JSON 엔드포인트
 */
export const getHelloJson = (
    params: GetHelloJsonParams,
 signal?: AbortSignal
) => {
      
      
      return fetchClient<YourTextDto>(
      {url: `/hello/json`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetHelloJsonQueryKey = (params: GetHelloJsonParams,) => {
    return [`/hello/json`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHelloJsonQueryOptions = <TData = Awaited<ReturnType<typeof getHelloJson>>, TError = unknown>(params: GetHelloJsonParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloJsonQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHelloJson>>> = ({ signal }) => getHelloJson(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHelloJsonQueryResult = NonNullable<Awaited<ReturnType<typeof getHelloJson>>>
export type GetHelloJsonQueryError = unknown


export function useGetHelloJson<TData = Awaited<ReturnType<typeof getHelloJson>>, TError = unknown>(
 params: GetHelloJsonParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHelloJson>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHelloJson<TData = Awaited<ReturnType<typeof getHelloJson>>, TError = unknown>(
 params: GetHelloJsonParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHelloJson>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHelloJson<TData = Awaited<ReturnType<typeof getHelloJson>>, TError = unknown>(
 params: GetHelloJsonParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Hello JSON 엔드포인트
 */

export function useGetHelloJson<TData = Awaited<ReturnType<typeof getHelloJson>>, TError = unknown>(
 params: GetHelloJsonParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHelloJson>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHelloJsonQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



