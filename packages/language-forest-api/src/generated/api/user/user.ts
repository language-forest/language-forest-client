/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Sample API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BaseUserNotification,
  CreateUserRequest,
  ErrorResponse,
  NotificationEnum,
  UpdateUserNotificationBody,
  UpdateUserRequest,
  UserResponse,
  UserSocialResponse
} from '../../schemas'
import { fetchClient } from '../../../../fetchClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary ÏÉàÎ°úÏö¥ Ïú†Ï†ÄÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 */
export const createUser = (
    createUserRequest: CreateUserRequest,
 signal?: AbortSignal
) => {
      
      
      return fetchClient<void>(
      {url: `/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest, signal
    },
      );
    }
  

/**
 * @summary jwt Í∏∞Î∞òÏúºÎ°ú Ïú†Ï†ÄÏùò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
 */
export const getUserMe = (
    
 signal?: AbortSignal
) => {
      
      
      return fetchClient<UserResponse>(
      {url: `/user/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMeQueryKey = () => {
    return [`/user/me`] as const;
    }

    
export const getGetUserMeQueryOptions = <TData = Awaited<ReturnType<typeof getUserMe>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMe>>> = ({ signal }) => getUserMe(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMe>>>
export type GetUserMeQueryError = unknown


export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary jwt Í∏∞Î∞òÏúºÎ°ú Ïú†Ï†ÄÏùò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
 */

export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ïú†Ï†ÄÏùò Ï†ïÎ≥¥Î•º Î≥ÄÍ≤ΩÌï©ÎãàÎã§. ÏïÑÏßÅÏùÄ ÌÅ∞ Ï∞®Ïù¥ ÏóÜÏúºÎãà Ïò®Î≥¥Îî©ÏóêÏÑú ÏÇ¨Ïö©Ìïú schemaÎ•º Ïû¨ÏÇ¨Ïö©Ìï©ÎãàÎã§.
 */
export const updateUser = (
    updateUserRequest: UpdateUserRequest,
 ) => {
      
      
      return fetchClient<void>(
      {url: `/user/me`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequest
    },
      );
    }
  

/**
 * Îî±Ìûà Îã§Î•∏ Í≥≥ÏóêÏÑú ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùÑ Ï†ïÎ≥¥Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê Í∑∏ÎÉ• emailÎßå Î∞òÌôòÌïòÎäî ÏãùÏúºÎ°ú Íµ¨ÌòÑÌï©ÎãàÎã§.
 * @summary Ïú†Ï†ÄÏùò ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
 */
export const getUserMeSocial = (
    
 signal?: AbortSignal
) => {
      
      
      return fetchClient<UserSocialResponse>(
      {url: `/user/me/social`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMeSocialQueryKey = () => {
    return [`/user/me/social`] as const;
    }

    
export const getGetUserMeSocialQueryOptions = <TData = Awaited<ReturnType<typeof getUserMeSocial>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMeSocialQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMeSocial>>> = ({ signal }) => getUserMeSocial(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMeSocialQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMeSocial>>>
export type GetUserMeSocialQueryError = unknown


export function useGetUserMeSocial<TData = Awaited<ReturnType<typeof getUserMeSocial>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMeSocial>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMeSocial<TData = Awaited<ReturnType<typeof getUserMeSocial>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMeSocial>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMeSocial<TData = Awaited<ReturnType<typeof getUserMeSocial>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïú†Ï†ÄÏùò ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
 */

export function useGetUserMeSocial<TData = Awaited<ReturnType<typeof getUserMeSocial>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeSocial>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMeSocialQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ïú†Ï†ÄÏùò notification Ï§ë ÌäπÏ†ï enumÍ∞íÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§
 */
export const getUserMeNotification = (
    notification: NotificationEnum,
 signal?: AbortSignal
) => {
      
      
      return fetchClient<BaseUserNotification>(
      {url: `/user/me/notification/${notification}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMeNotificationQueryKey = (notification: NotificationEnum,) => {
    return [`/user/me/notification/${notification}`] as const;
    }

    
export const getGetUserMeNotificationQueryOptions = <TData = Awaited<ReturnType<typeof getUserMeNotification>>, TError = ErrorResponse>(notification: NotificationEnum, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMeNotificationQueryKey(notification);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMeNotification>>> = ({ signal }) => getUserMeNotification(notification, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(notification), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMeNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMeNotification>>>
export type GetUserMeNotificationQueryError = ErrorResponse


export function useGetUserMeNotification<TData = Awaited<ReturnType<typeof getUserMeNotification>>, TError = ErrorResponse>(
 notification: NotificationEnum, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMeNotification>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMeNotification<TData = Awaited<ReturnType<typeof getUserMeNotification>>, TError = ErrorResponse>(
 notification: NotificationEnum, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMeNotification>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMeNotification<TData = Awaited<ReturnType<typeof getUserMeNotification>>, TError = ErrorResponse>(
 notification: NotificationEnum, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïú†Ï†ÄÏùò notification Ï§ë ÌäπÏ†ï enumÍ∞íÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§
 */

export function useGetUserMeNotification<TData = Awaited<ReturnType<typeof getUserMeNotification>>, TError = ErrorResponse>(
 notification: NotificationEnum, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMeNotification>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMeNotificationQueryOptions(notification,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ïú†Ï†ÄÏùò ÌäπÏ†ï ÏïåÎ¶º(notification) ÌôúÏÑ±Ìôî Ïó¨Î∂ÄÎ•º Î≥ÄÍ≤ΩÌï©ÎãàÎã§. Ïù¥Îïå ÌîÑÎ°†Ìä∏ÏóêÏÑú ÎÑòÍ≤®Ï£ºÎäî Í∞íÏúºÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 */
export const updateUserNotification = (
    notification: NotificationEnum,
    updateUserNotificationBody: UpdateUserNotificationBody,
 ) => {
      
      
      return fetchClient<BaseUserNotification>(
      {url: `/user/me/notification/${notification}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateUserNotificationBody
    },
      );
    }
  

/**
 * @summary ÌöåÏõêÌÉàÌá¥Î•º ÏßÑÌñâÌï©ÎãàÎã§.
 */
export const userMeDelete = (
    
 signal?: AbortSignal
) => {
      
      
      return fetchClient<void>(
      {url: `/user/me/delete`, method: 'POST', signal
    },
      );
    }
  

